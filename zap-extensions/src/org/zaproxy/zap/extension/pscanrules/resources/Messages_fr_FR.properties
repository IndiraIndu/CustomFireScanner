#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

pscanrules.desc=R\u00e8gles d'analyse passive

pscanrules.headerxssprotectionscanner.name=Web Browser XSS Protection Not Enabled
pscanrules.headerxssprotectionscanner.desc=Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
pscanrules.headerxssprotectionscanner.refs=https\://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps\://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
pscanrules.headerxssprotectionscanner.extrainfo=The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it\: \nX-XSS-Protection\: 1; mode\=block\nX-XSS-Protection\: 1; report\=http\://www.example.com/xss\nThe following values would disable it\:\nX-XSS-Protection\: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
pscanrules.headerxssprotectionscanner.soln=Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.

pscanrules.xframeoptionsscanner.name=En-t\u00eate X-Frame-Options pas renseign\u00e9
pscanrules.xframeoptionsscanner.desc=L'en-t\u00eate X-Frame-Options n'a pas \u00e9t\u00e9 renseign\u00e9e pour d\u00e9fendre contre les attaques de 'ClickJacking'.
pscanrules.xframeoptionsscanner.missing.desc=L'en-t\u00eate X-Frame-Options n'est pas incluse dans la r\u00e9ponse HTTP pour prot\u00e9ger contre les attaques de 'ClickJacking'.
pscanrules.xframeoptionsscanner.otherinfo=At "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xframeoptionsscanner.refs=http\://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
pscanrules.xframeoptionsscanner.soln=La plupart des navigateurs internet modernes supportent l'en-t\u00eate HTTP X-Frame-Options. Assurez-vous que celle-ci est renseign\u00e9e sur toutes les pages internet retourn\u00e9es par votre site (si cette page ne doit \u00eatre encadr\u00e9e que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadr\u00e9e. ALLOW-FROM permet \u00e0 des sites sp\u00e9cifiques d'encadrer la page, pour autant que le navigateur le supporte).

pscanrules.xcontenttypeoptionsscanner.name=En-t\u00eate X-Content-Type-Options manquant
pscanrules.xcontenttypeoptionsscanner.desc=L'en-t\u00eate X-Content-Type-Options contre le sniffing MIME n'est pas renseign\u00e9 \u00e0 'nosniff'. Ceci permet \u00e0 de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de r\u00e9ponse, conduisant potentiellement \u00e0 l'interpr\u00e9tation et l'affichage du contenu dans un autre type que celui d\u00e9clar\u00e9. A l'heure actuelle (d\u00e9but 2014), les anciennes versions de Firefox utiliseront le type de contenu d\u00e9clar\u00e9 (au cas o\u00f9 un type est d\u00e9termin\u00e9), plut\u00f4t qu'analyser le MIME.
pscanrules.xcontenttypeoptionsscanner.otherinfo=Ce probl\u00e8me s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touch\u00e9es par des probl\u00e8mes d'injection, auquel cas il est encore possible que les navigateurs interpr\u00e9tent des pages autrement que selon leur type de contenu r\u00e9el.
pscanrules.xcontenttypeoptionsscanner.refs=http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers
pscanrules.xcontenttypeoptionsscanner.soln=Assurez-vous que l'application ou le serveur internet renseigne l'en-t\u00eate Content-Type correctement, et que l'en-t\u00eate X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.\nSi possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse \u00eatre command\u00e9 par l'application ou le serveur internet de mani\u00e8re \u00e0 ne pas pratiquer le sniffing MIME.

pscanrules.applicationerrorscanner.name=Application Error Disclosure
pscanrules.applicationerrorscanner.desc=This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrorscanner.soln=Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrolscanner.name=Incomplete or No Cache-control and Pragma HTTP Header Set
pscanrules.cachecontrolscanner.desc=The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.
pscanrules.cachecontrolscanner.soln=Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate, private; and that the pragma HTTP header is set with no-cache.
pscanrules.cachecontrolscanner.refs=https\://www.owasp.org/index.php/Session_Management_Cheat_Sheet\#Web_Content_Caching

pscanrules.contenttypemissingscanner.name=Content-Type Header Missing

pscanrules.cookiehttponlyscanner.name=Cookie No HttpOnly Flag

pscanrules.cookiesecureflagscanner.name=Cookie Without Secure Flag

pscanrules.crossdomainscriptinclusionscanner.name=Cross-Domain JavaScript Source File Inclusion

pscanrules.mixedcontentscanner.name=Secure Pages Include Mixed Content

pscanrules.passwordautocompletescanner.name=Password Autocomplete in Browser

pscanrules.testinfoprivateaddressdisclosure.name=Private IP Disclosure
pscanrules.testinfoprivateaddressdisclosure.desc=A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.testinfoprivateaddressdisclosure.soln=Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.testinfoprivateaddressdisclosure.refs=https\://tools.ietf.org/html/rfc1918

pscanrules.testinfosessionidurl.name=Session ID in URL Rewrite
pscanrules.testinfosessionidurl.desc=URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.testinfosessionidurl.soln=For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.testinfosessionidurl.refs=http\://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.testinfosessionidurl.referrer.alert=Referer Exposes Session ID
pscanrules.testinfosessionidurl.referrer.desc=A hyperlink pointing to anther host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.testinfosessionidurl.referrer.soln=This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

