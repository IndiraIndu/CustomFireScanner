#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages

pscanrules.desc=Regole di analisi passiva

pscanrules.headerxssprotectionscanner.name=Protezione XSS del Browser Web non abilitato
pscanrules.headerxssprotectionscanner.desc=Protezione XSS del Web Browser non \u00e8 abilitata, o \u00e8 disabilitata dalla configurazione dell'intestazione di risposta HTTP 'X-XSS-Protection' sul server web
pscanrules.headerxssprotectionscanner.refs=https\://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps\://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
pscanrules.headerxssprotectionscanner.extrainfo=L'intestazione di risposta HTTP X-XSS-Protection consente al server web attivare o disattivare il meccanismo di protezione del browser web XSS. I valori seguenti avrebbe tentato di attivarla\:\nX-XSS-Protection\: 1; mode \= block\nX-XSS-Protection\: 1; report \= http\://www.example.com/xss\ni seguenti valori lo disabiliterebbero\:\n X-XSS-Protection\: 0\nL'intestazione di risposta HTTP X-XSS-Protection \u00e8 attualmente supportata su Internet Explorer, Chrome e Safari (WebKit). Si noti che questo avviso viene generato solo se il corpo della risposta potenzialmente potrebbe contenere un payload XSS (con un tipo di contenuto  basato su testo , con una lunghezza diversa da zero).
pscanrules.headerxssprotectionscanner.soln=Assicurarsi che il filtro XSS del web browser sia abilitato, impostando l'intestazione di risposta HTTP X-XSS-Protection a '1'.

pscanrules.xframeoptionsscanner.name=X-Frame-Options  non \u00e8 impostato nell'intestazione
pscanrules.xframeoptionsscanner.desc=L'intestazione X-Frame-Options non \u00e8 stata impostata per difesa contro gli attacchi 'ClickJacking'.
pscanrules.xframeoptionsscanner.missing.desc=L'intestazione X-Frame-Options non \u00e8 inclusa nella risposta HTTP per proteggersi da attacchi 'ClickJacking'.
pscanrules.xframeoptionsscanner.otherinfo=At "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xframeoptionsscanner.refs=http\://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
pscanrules.xframeoptionsscanner.soln=La maggior parte dei browser Web moderni  supportano l'intestazione HTTP X-Frame-Options. Assicurarsi che sia impostata su tutte le pagine web restituite dal tuo sito (se si prevede che la pagina sia incorporata da frame solamente da pagine sul tuo server (ad esempio fa parte di un FRAMESET) allora ti consigliamo di utilizzare SAMEORIGIN, altrimenti se non prevedete che la pagina sia in nessun caso da inserire in un frame, \u00e8 necessario utilizzare DENY.  ALLOW-FROM consente a siti Web specifici di inserire in un frame la pagina web in un browser web supportato).

pscanrules.xcontenttypeoptionsscanner.name=Intestazione X-Content-Type-Options mancante
pscanrules.xcontenttypeoptionsscanner.desc=L'intestazione Anti-MIME-Sniffing nell'impostazione X-Content-Type-Options non era impostata su 'nosniff'. Questo permette alle vecchie versioni di Internet Explorer e Chrome di eseguire analisi MIME-sniffing sul corpo della risposta, potenzialmente causando che il corpo della risposta venga interpretato e visualizzato come un tipo di contenuto diverso dal tipo dichiarato. Versioni attuali (inizio 2014) e precedenti di Firefox useranno il tipo di contenuto dichiarato (se uno \u00e8 impostato), piuttosto che eseguire analisi MIME.
pscanrules.xcontenttypeoptionsscanner.otherinfo=This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scanner will not alert on client or server error responses.
pscanrules.xcontenttypeoptionsscanner.refs=http\://msdn.microsoft.com/en-us/library/ie/gg622941%28v\=vs.85%29.aspx\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers
pscanrules.xcontenttypeoptionsscanner.soln=Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.

pscanrules.applicationerrorscanner.name=Application Error Disclosure
pscanrules.applicationerrorscanner.desc=This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
pscanrules.applicationerrorscanner.soln=Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.

pscanrules.cachecontrolscanner.name=Incomplete or No Cache-control and Pragma HTTP Header Set
pscanrules.cachecontrolscanner.desc=The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.
pscanrules.cachecontrolscanner.soln=Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate, private; and that the pragma HTTP header is set with no-cache.
pscanrules.cachecontrolscanner.refs=https\://www.owasp.org/index.php/Session_Management_Cheat_Sheet\#Web_Content_Caching

pscanrules.contenttypemissingscanner.name=Content-Type Header Missing

pscanrules.cookiehttponlyscanner.name=Cookie No HttpOnly Flag

pscanrules.cookiesecureflagscanner.name=Cookie Without Secure Flag

pscanrules.crossdomainscriptinclusionscanner.name=Cross-Domain JavaScript Source File Inclusion

pscanrules.mixedcontentscanner.name=Secure Pages Include Mixed Content

pscanrules.passwordautocompletescanner.name=Password Autocomplete in Browser

pscanrules.testinfoprivateaddressdisclosure.name=Private IP Disclosure
pscanrules.testinfoprivateaddressdisclosure.desc=A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
pscanrules.testinfoprivateaddressdisclosure.soln=Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
pscanrules.testinfoprivateaddressdisclosure.refs=https\://tools.ietf.org/html/rfc1918

pscanrules.testinfosessionidurl.name=Session ID in URL Rewrite
pscanrules.testinfosessionidurl.desc=URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
pscanrules.testinfosessionidurl.soln=For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
pscanrules.testinfosessionidurl.refs=http\://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html
pscanrules.testinfosessionidurl.referrer.alert=Referer Exposes Session ID
pscanrules.testinfosessionidurl.referrer.desc=A hyperlink pointing to anther host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.
pscanrules.testinfosessionidurl.referrer.soln=This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.

